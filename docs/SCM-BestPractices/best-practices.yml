github:
    actions:
        - policy_name: actions_can_approve_pull_requests
          title: Workflows Are Allowed To Approve Pull Requests
          description: Your default GitHub Actions configuration allows for workflows to approve pull requests. This could allow users to bypass code-review restrictions.
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Go to the org's settings page
            - Enter "Actions - General" tab
            - Under 'Workflow permissions'
            - Uncheck 'Allow GitHub actions to create and approve pull requests.
            - Click 'Save'
          threat:
            - Attackers can exploit this misconfiguration to bypass code-review restrictions by creating a workflow that approves their own pull request and then merging the pull request without anyone noticing, introducing malicious code that would go straight ahead to production.
        - policy_name: all_github_actions_are_allowed
          title: GitHub Actions Runs Are Not Limited To Verified Actions
          description: When using GitHub Actions, it is recommended to only use actions by Marketplace verified creators or explicitly trusted actions. By not restricting which actions are permitted allows your developers to use actions that were not audited and potentially malicious, thus exposing your pipeline to supply chain attacks.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the org's settings page
            - Enter "Actions - General" tab
            - Under "Policies"
            - Select "Allow enterprise, and select non-enterprise, actions and reusable workflows"
            - Check "Allow actions created by GitHub" and "Allow actions by Marketplace verified creators"
            - Set any other used trusted actions under "Allow specified actions and reusable workflows"
            - Click "Save"
          threat:
            - 'This misconfiguration could lead to the following attack:'
            - 1. Attacker creates a repository with a tempting but malicious custom GitHub Action
            - 2. An innocent developer / DevOps engineer uses this malicious action
            - 3. The malicious action has access to the developer repository and could steal its secrets or modify its content
        - policy_name: all_repositories_can_run_github_actions
          title: GitHub Actions Is Not Restricted To Selected Repositories
          description: By not limiting GitHub Actions to specific repositories, every user in the organization is able to run arbitrary workflows. This could enable malicious activity such as accessing organization secrets, crypto-mining, etc.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the org's settings page
            - Enter the "Actions - General" tab
            - Under "Policies"
            - Change "All repositories" to "Selected repositories" and select repositories that should be able to run actions
            - Click "Save"
          threat:
            - 'This misconfiguration could lead to the following attack:'
            - '1. Prerequisite: the attacker is part of your GitHub organization'
            - 2. Attacker creates new repository in the organization
            - 3. Attacker creates a workflow file that reads all organization secrets and exfiltrate them
            - 4. Attacker trigger the workflow
            - 5. Attacker receives all organization secrets and uses them maliciously
        - policy_name: token_default_permissions_is_read_write
          title: Default Workflow Token Permission Is Not Read Only
          description: Your default GitHub Action workflow token permission is set to read-write. When creating workflow tokens, it is highly recommended to follow the Principle of Least Privilege and force workflow authors to specify explicitly which permissions they need.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the org's settings page
            - Enter "Actions - General" tab
            - Under 'Workflow permissions'
            - Select 'Read repository contents permission'
            - Click 'Save'
          threat:
            - In case of token compromise (due to a vulnerability or malicious third-party GitHub actions), an attacker can use this token to sabotage various assets in your CI/CD pipeline, such as packages, pull-requests, deployments, and more.
    member:
        - policy_name: organization_has_too_many_admins
          title: Organization Has Too Many Owners
          description: Organization owners are highly privileged and could create great damage if being compromised, it's recommended to limit them to the minimum needed (recommended maximum 3 owners).
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the organization People page
            - Select the unwanted owners
            - Using the "X members selected" - change role to member
          threat:
            - 1. An organization has a permissive attitude and provides an owner role to all developers.
            - 2. One of the developers has decided to collaborate with an evil ransomware gang, and uses his high privileges to add a malicious external collaborator
            - 3. The malicious collaborator, being an owner, has a wide range of destructive operations he can do (e.g. remove security settings)
        - policy_name: stale_admin_found
          title: Stale Admin Found
          description: A member with global admin permissions without any activity in the past 6 months. Admin users are extremely powerful and common compliance standards demand keeping the number of admins to a minimum. Consider revoking this member’s admin credentials by downgrading to regular user or removing the user completely.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the org's People page
            - Select all stale admins
            - Using the "X members selected" - remove members from organization
          threat:
            - Stale admins are most likely not managed and monitored, increasing the possibility of being compromised.
        - policy_name: stale_member_found
          title: Stale Member Found
          description: A member didn't do any action in the last 6 months. Stale members can pose a potential risk if they are compromised. Consider removing the user's access completely.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the org's People page
            - Select all stale members
            - Using the "X members selected" - remove members from organization
          threat:
            - Stale members are most likely not managed and monitored, increasing the possibility of being compromised.
    organization:
        - policy_name: default_repository_permission_is_not_none
          title: Permissive Default Member Permissions Exist For New Repositories
          description: Default repository permissions configuration is not set in the organization, thus every new repository will be accessible by default to all users. It is strongly recommended to remove the default permissions and assign them on demand.
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Go to the organization settings page
            - Enter "Member privileges" tab
            - Under "Base permissions"
            - Set permissions to "No permissions"
            - Click "Save"
          threat:
            - Organization members can see the content of freshly created repositories, even if they should be restricted.
        - policy_name: two_factor_authentication_not_required_for_org
          title: Two-Factor Authentication Is Not Enforced For The Organization
          description: The two-factor authentication requirement is not enabled at the organization level. Regardless of whether users are managed externally by SSO, it is highly recommended to enable this option, to reduce the risk of a deliberate or accidental user creation without MFA.
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Go to the organization settings page
            - Enter "Authentication security" tab
            - Under "Two-factor authentication"
            - Toggle on "Require two-factor authentication for everyone in the <ORG> organization"
            - Click "Save"
          threat:
            - If an attacker gets the valid credentials for one of the organization’s users they can authenticate to your GitHub organization.
        - policy_name: organization_not_using_single_sign_on
          title: Organization Not Using Single-Sign-On
          description: It is recommended to enable access to an organization via SAML single sign-on (SSO) by authenticating through an identity provider (IdP).
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the organization settings page
            - Enter "Authentication security" tab
            - Toggle on "Enable SAML authentication"
            - Fill in the remaining SSO configuration as instructed on the screen
            - Click "Save"
          threat:
            - Not using an SSO solution makes it more difficult to track a potentially compromised user's actions accross different systems, prevents the organization from defining a common password policy, and makes it challenging to audit different aspects of the user's behavior.
        - policy_name: non_admins_can_create_public_repositories
          title: Non-Admins Can Create Public Repositories
          description: An organization allows non-admin members to create public repositories. Creating a public repository can be done by mistake, and may expose sensitive organization code, which, once exposed, may be copied, cached or stored by external parties. Therefore, it is highly recommended to restrict the option to create public repositories to admins only and reduce the risk of unintentional code exposure.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the organization settings page
            - Enter "Member privileges" tab
            - Under "Repository creation"
            - Toggle off "Public"
            - Click "Save"
          threat:
            - A member of the organization could inadvertently or maliciously make public an internal repository exposing confidential data.
        - policy_name: organization_webhook_no_secret
          title: Webhook Configured Without A Secret
          description: Webhooks are not configured with an authenticated token to validate the origin of the request and could make your software vulnerable.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the organization settings page
            - Select "Webhooks"
            - Press on the insecure webhook
            - Configure a secret
            - Click "Update webhook"
          threat:
            - Not using a webhook secret makes the service receiving the webhook unable to determine the authenticity of the request.
            - This allows attackers to masquerade as your organization, potentially creating an unstable or insecure state in other systems.
        - policy_name: organization_webhook_doesnt_require_ssl
          title: Webhook Configured Without SSL
          description: Webhooks that are not configured with SSL enabled could expose your software to man in the middle attacks (MITM).
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the organization settings page
            - Select "Webhooks"
            - Press on the insecure webhook
            - Verify url starts with https
            - Enable "SSL verification"
            - Click "Update webhook"
          threat:
            - If SSL verification is disabled, any party with access to the target DNS domain can masquerade as your designated payload URL, allowing it freely read and affect the response of any webhook request.
            - In the case of GitHub Enterprise Server instances, it may be sufficient only to control the DNS configuration of the network where the instance is deployed, as an attacker can redirect traffic to the target domain in your internal network directly to them, and this is often much easier than compromising an internet-facing domain.
    repository:
        - policy_name: code_review_not_required
          title: Default Branch Doesn't Require Code Review
          description: In order to comply with separation of duties principle and enforce secure code practices, a code review should be mandatory using the source-code-management built-in enforcement. This option is found in the branch protection setting of the repository. An even safer option is to require 2 separate reviewers, which is enforced in the Legitify policy "Default Branch Doesn't Require Code Review By At Least Two Reviewers".
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require a pull request before merging"
            - Check "Require approvals"
            - Set "Required number of approvals before merging" to 1 or more
            - Click "Save changes"
          threat:
            - Users can merge code without being reviewed, which can lead to insecure code reaching the main branch and production.
        - policy_name: actions_can_approve_pull_requests
          title: Workflows Are Allowed To Approve Pull Requests
          description: Your default GitHub Actions configuration allows for workflows to approve pull requests. This could allow users to bypass code-review restrictions.
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Go to the org's settings page
            - Enter "Actions - General" tab
            - Under 'Workflow permissions'
            - Uncheck 'Allow GitHub actions to create and approve pull requests.
            - Click 'Save'
          threat:
            - Attackers can exploit this misconfiguration to bypass code-review restrictions by creating a workflow that approves their own pull request and then merging the pull request without anyone noticing, introducing malicious code that would go straight ahead to production.
        - policy_name: repository_not_maintained
          title: Repository Not Maintained
          description: There hasn't been any commits in tha last 3 months. A project which is not active might not be patched against security issues within its code and dependencies, and is therefore at higher risk of including unpatched vulnerabilities.
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Either Delete or Archive the repository
          threat:
            - As new vulnerabilities are found over time, unmaintained repositories are more likely to point to dependencies that have known vulnerabilities, exposing these repositories to 1-day attacks.
        - policy_name: non_linear_history
          title: Default Branch Doesn't Require Linear History
          description: Prevent merge commits from being pushed to protected branches.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require linear history"
            - Click "Save changes"
          threat:
            - Having a non-linear history makes it harder to reverse changes, making recovery from bugs and security risks slower and more difficult.
        - policy_name: missing_default_branch_protection_deletion
          title: Default Branch Could Be Deleted
          description: The history of the default branch is not protected against deletion for this repository.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Uncheck "Allow deletions"
            - Click "Save changes"
          threat:
            - Rewriting project history can make it difficult to trace back when bugs or security issues were introduced, making them more difficult to remediate.
        - policy_name: missing_default_branch_protection_force_push
          title: Default Branch Allows Force Pushes
          description: The history of the default branch is not protected against changes for this repository. Protecting branch history ensures every change that was made to code can be retained and later examined. This issue is raised if the default branch history can be modified using force push.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Uncheck "Allow force pushes"
            - Click "Save changes"
          threat:
            - Rewriting project history can make it difficult to trace back when bugs or security issues were introduced, making them more difficult to remediate.
        - policy_name: missing_default_branch_protection
          title: Default Branch Is Not Protected
          description: Branch protection is not enabled for this repository’s default branch. Protecting branches ensures new code changes must go through a controlled merge process and allows enforcement of code review as well as other security tests. This issue is raised if the default branch protection is turned off.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Add rule"
            - Set "Branch name pattern" as the default branch name (usually "main" or "master")
            - Set desired protections
            - Click "Create" and save the rule
          threat:
            - Any contributor with write access may push potentially dangerous code to this repository, making it easier to compromise and difficult to audit.
        - policy_name: scorecard_score_too_low
          title: Low Scorecard Score for Repository Indicates Poor Security Posture
          description: Scorecard is an open-source tool from OSSF that helps to asses the security posture of repositories, Low scorecard score means your repository may be under risk.
          severity: MEDIUM
          remediation:
            - 'Get scorecard output by either:'
            - '- Run legitify with --scorecard verbose'
            - '- Run scorecard manually'
            - Fix the failed checks
          threat:
            - A low Scorecard score can indicate that the repository is more vulnerable to attack than others, making it a prime attack target.
        - policy_name: requires_branches_up_to_date_before_merge
          title: Default Branch Doesn’t Require Branches To Be Up To Date Before Merge
          description: Status checks are required, but branches that are not up to date can be merged.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require status checks to pass before merging"
            - Check "Require branches to be up to date before merging"
            - Click "Save changes"
          threat:
            - Required status checks may be failing on the latest version after passing on an earlier version of the code, making it easy to commit buggy or otherwise insecure code.
        - policy_name: vulnerability_alerts_not_enabled
          title: Vulnerability Alerts Is Not Enabled
          description: Enable GitHub Dependabot to continuously scan for open source vulnerabilities and receive alerts
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Code security and analysis" tab
            - Set "Dependabot alerts" as Enabled
          threat:
            - An open source vulnerability may be affecting your code without your knowledge, making it vulnerable to exploitation.
        - policy_name: code_review_by_two_members_not_required
          title: Default Branch Doesn't Require Code Review By At Least Two Reviewers
          description: In order to comply with separation of duties principle and enforce secure code practices, a code review should be mandatory using the source-code-management built-in enforcement. This option is found in the branch protection setting of the repository.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require a pull request before merging"
            - Check "Require approvals"
            - Set "Required number of approvals before merging" to 1 or more
            - Click "Save changes"
          threat:
            - Users can merge code without being reviewed, which can lead to insecure code reaching the main branch and production.
            - Requiring code review by at least two reviewers further decreases the risk of an insider threat (as merging code requires compromising at least 2 identities with write permissions), and decreases the likelihood of human error in the review process.
        - policy_name: requires_status_checks
          title: Default Branch Doesn’t Require All Checks To Pass Before Merge
          description: Branch protection is enabled. However, the checks which validate the quality and security of the code are not required to pass before submitting new changes. The default check ensures code is up-to-date in order to prevent faulty merges and unexpected behaviors, as well as other custom checks that test security and quality. It is advised to turn this control on to ensure any existing or future check will be required to pass. This option is found in the branch protection setting for the repository.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require status checks to pass before merging"
            - Add the required checks that must pass before merging (tests, lint, etc...)
            - Click "Save changes"
          threat:
            - Not defining a set of required status checks can make it easy for contributors to introduce buggy or insecure code as manual review, whether mandated or optional, is the only line of defense.
        - policy_name: ghas_dependency_review_not_enabled
          title: GitHub Advanced Security – Dependency Review Is Disabled For A Repository
          description: Enable GitHub Advanced Security dependency review to avoid introducing new vulnerabilities
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Code security and analysis" tab
            - Set "Dependency graph" as Enabled
          threat:
            - A contributor may add vulnerable third-party dependencies to the repository, introducing vulnerabilities to your application that will only be detected after merge.
        - policy_name: token_default_permissions_is_read_write
          title: Default Workflow Token Permission Is Not Read Only
          description: Your default GitHub Action workflow token permission is set to read-write. When creating workflow tokens, it is highly recommended to follow the Principle of Least Privilege and force workflow authors to specify explicitly which permissions they need.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the org's settings page
            - Enter "Actions - General" tab
            - Under 'Workflow permissions'
            - Select 'Read repository contents permission'
            - Click 'Save'
          threat:
            - In case of token compromise (due to a vulnerability or malicious third-party GitHub actions), an attacker can use this token to sabotage various assets in your CI/CD pipeline, such as packages, pull-requests, deployments, and more.
        - policy_name: no_conversation_resolution
          title: Default Branch Doesn't Require All Conversations To Be Resolved Before Merge
          description: Require all Pull Request conversations to be resolved before merging. Check this to avoid bypassing/missing a Pull Reuqest comment.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require conversation resolution before merging"
            - Click "Save changes"
          threat:
            - Allowing the merging of code without resolving all conversations can promote poor and vulnerable code, as important comments may be forgotten or deliberately ignored when the code is merged.
        - policy_name: no_signed_commits
          title: Default Branch Doesn't Require All Commits To Be Signed
          description: Require all commits to be signed and verified
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require signed commits"
            - Click "Save changes"
          threat:
            - A commit containing malicious code may be crafted by a malicious actor that has acquired write access to the repository to initiate a supply chain attack. Commit signing provides another layer of defense that can prevent this type of compromise.
        - policy_name: pushes_are_not_restricted
          title: Default Branch Doesn't Restrict Who Can Push
          description: By default, commits can be pushed directly to protected branches, without going through a Pull Request. Restrict who can push commits to protected branches so that commits can be added only via merges, which require Pull Request.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Restrict who can push to matching branches"
            - Choose who should be allowed to push
            - Click "Save changes"
          threat:
            - An attacker with write credentials may introduce vulnerabilities to your code without your knowledge. Alternatively, contributors may commit unsafe code that is buggy or easy to exploit that could have been caught using a review process.
        - policy_name: repository_webhook_doesnt_require_ssl
          title: Webhook Configured Without SSL
          description: Webhooks that are not configured with SSL enabled could expose your sofware to man in the middle attacks (MITM).
          severity: LOW
          remediation:
            - Make sure you can manage webhooks for the repository
            - Go to the repository settings page
            - Select "Webhooks"
            - Verify url starts with https
            - Press on the insecure webhook
            - Enable "SSL verfication"
            - Click "Update webhook"
          threat:
            - If SSL verification is disabled, any party with access to the target DNS domain can masquerade as your designated payload URL, allowing it freely read and affect the response of any webhook request.
            - In the case of GitHub Enterprise Server instances, it may be sufficient only to control the DNS configuration of the network where the instance is deployed, as an attacker can redirect traffic to the target domain in your internal network directly to them, and this is often much easier than compromising an internet-facing domain.
        - policy_name: repository_has_too_many_admins
          title: Repository Has Too Many Admins
          description: Repository are admins highly privileged and could create great damage if being compromised, it's recommeneded to limit them to the minimum required (recommended maximum 3 admins).
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repository settings page
            - Press "Collaborators and teams"
            - Select the unwanted admin users
            - Select "Change Role"
          threat:
            - A compromised user with admin permissions can initiate a supply chain attack in a plethora of ways.
            - Having many admin users increases the overall risk of user compromise, and makes it more likely to lose track of unused admin permissions given to users in the past.
        - policy_name: repository_webhook_no_secret
          title: Webhook Configured Without A Secret
          description: Webhooks are not configured with an authenticated token to validate the origin of the request and could make your software vulnerable.
          severity: LOW
          remediation:
            - Make sure you can manage webhooks for the repository
            - Go to the repository settings page
            - Select "Webhooks"
            - Press on the insecure webhook
            - Confiure a secret
            - Click "Update webhook"
          threat:
            - Not using a webhook secret makes the service receiving the webhook unable to determine the authenticity of the request.
            - This allows attackers to masquerade as your repository, potentially creating an unstable or insecure state in other systems.
        - policy_name: review_dismissal_allowed
          title: Default Branch Doesn't Restrict Who Can Dismiss Reviews
          description: Any user with write access to the repository can dismiss pull-request reviews. Pull-request review contains essential information on the work that needs to be done and helps keep track of the changes. Dismissing it might cause a loss of this information and should be restricted to a limited number of users.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Restrict who can dismiss pull request reviews"
            - Click "Save changes"
          threat:
            - Allowing the dismissal of reviews can promote poor and vulnerable code, as important comments may be forgotten and ignored during the review process.
        - policy_name: forking_allowed_for_repository
          title: Forking Allowed for This Repository
          description: Forking a repository can lead to loss of control and potential exposure of the source code. The option to fork must be disabled by default and turned on only by admins deliberately when opting to create a fork. If you do not need forking, it is recommended to turn it off in the repository configuration.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "General" tab
            - Under "Features"
            - Toggle off "Allow forking"
          threat:
            - Forked repositories cause more code and secret sprawl in the organization as forks are independent copies of the repository and need to be tracked separately, making it more difficult to keep track of sensitive assets and contain potential incidents.
        - policy_name: dismisses_stale_reviews
          title: Default Branch Doesn't Require New Code Changes After Approval To Be Re-Approved
          description: This security control prevents merging code that was approved but later on changed. Turning it on ensures new changes are required to be reviewed again. This setting is part of the branch protection and code-review settings, and hardens the review process. If turned off - a developer can change the code after approval, and push code that is different from the one that was previously allowed. This option is found in the branch protection setting for the repository.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require a pull request before merging"
            - Check "Dismiss stale pull request approvals when new commits are pushed"
            - Click "Save changes"
          threat:
            - Buggy or insecure code may be committed after approval and will reach the main branch without review. Alternatively, an attacker can attempt a just-in-time attack to introduce dangerous code just before merge.
        - policy_name: code_review_not_limited_to_code_owners
          title: Default Branch Doesn't Limit Code Review to Code-Owners
          description: It is recommended to require code review only from designated individuals specified in CODEOWNERS file. Turning this option on enforces that only the allowed owners can approve a code change. This option is found in the branch protection setting of the repository.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Branches" tab
            - Under "Branch protection rules"
            - Click "Edit" on the default branch rule
            - Check "Require a pull request before merging"
            - Check "Require review from Code Owners"
            - Click "Save changes"
          threat:
            - A pull request may be approved by any contributor with write access. Specifying specific code owners can ensure review is only done by individuals with the correct expertise required for the review of the changed files, potentially preventing bugs and security risks.
    runner_group:
        - policy_name: runner_group_can_be_used_by_public_repositories
          title: Runner Group Is Not Limited to Private Repositories
          description: |
            Workflows from public repositories are allowed to run on GitHub Hosted Runners.
            When using GitHub Hosted Runners, it is recommended to allow only workflows from private repositories to run on these runners to avoid being vulnerable
            to malicious actors using workflows from public repositories to break into your private network.
            In case of inadequate security measures implemented on the hosted runner,
            malicious actors could fork your repository and then create a pwn-request (a pull-request from a forked repository to the base repository with malicious intentions)
            that create a workflow that exploits these vulnerabilities and move laterally inside your network.
          severity: HIGH
          remediation:
            - Go to the organization settings page
            - Press Actions ➝ Runner groups
            - Select the violating repository
            - Uncheck Allow public repositories
          threat:
            - Hosted runners are usually part of the organization's private network and can be easily misconfigured.
            - 'If the hosted runner is insecurely configured, any GitHub user could:'
            - 1. Create a workflow that runs on the public hosted runner
            - 2. Exploit the misconfigurations to execute code inside the private network
        - policy_name: runner_group_not_limited_to_selected_repositories
          title: Runner Group Is Not Limited to Selected Repositories
          description: |
            Not limiting the runner group to selected repositories allows any user in the organization to execute workflows
            on the group's runners.
            In case of inadequate security measures implemented on the hosted runner,
            malicious insider could create a repository with a workflow that exploits the runner's vulnerabilities to move laterally inside your network.
          severity: MEDIUM
          remediation:
            - Go to the organization settings page
            - Go to Actions ➝ Runner groups
            - Under the 'Repository Access' section, select 'Selected repositories'
            - Select the required repositories
          threat:
            - Hosted runners are usually part of the organization's private network and can be easily misconfigured.
            - 'If the hosted runner is insecurely configured, any user in the organization could:'
            - 1. Create a workflow that runs on the hosted runner
            - 2. Exploit the runner misconfigurations/known CVE's to execute code inside the private network
gitlab:
    group:
        - policy_name: two_factor_authentication_not_required_for_group
          title: Two-Factor Authentication Is Not Enforced For The Group
          description: The two-factor authentication requirement is not enabled at the group level. Regardless of whether users are managed externally by SSO, it is highly recommended to enable this option, to reduce the risk of a deliberate or accidental user creation without MFA.
          severity: HIGH
          remediation:
            - Go to the group page
            - Press Settings -> General
            - Expand "Permissions and group features"
            - Toggle "Require all users in this group to set up two-factor authentication"
            - Press "Save Changes"
          threat:
            - If an attacker gets the valid credentials for one of the organization’s users they can authenticate to your GitHub organization.
        - policy_name: collaborators_can_fork_repositories_to_external_namespaces
          title: Collaborators Can Fork Repositories To External Namespaces
          description: The ability to fork project to external namespaces is turned on. Forking repositories poses security issues due to the loss of control over the code. It is recommended to disable this feature if it is not explicitly needed, in order to proactively prevent code leakage.
          severity: MEDIUM
          remediation:
            - Go to the top-level groups Settings > General page
            - Expand the Permissions and group features section
            - Check Prevent project forking outside current group
            - Select Save changes
          threat:
            - Forking to external namespaces could result in loss of control over proprietary information and potentially expose the organization to security risks, such as data leaks.
        - policy_name: group_does_not_enforce_branch_protection_by_default
          title: Group Does Not Enforce Branch Protection by Default
          description: You do not have a default full branch protection for a specific group, which means any new repository will be created without it. In fully protected level, developers cannot push new commits, and no one can force push or delete the branch. Protecting branches ensures new code changes must go through a controlled merge process and it allows enforcement of code review and other security tests.
          severity: MEDIUM
          remediation:
            - Go to the group page
            - Press Settings -> Repository
            - Expand "Default Branch" section
            - Toggle the required protection rule
            - Press "Save Changes"
          threat:
            - A developer creates a repository without any branch protection rules
            - Attacker that get access to the repository can modify its main branch without any restrictions
        - policy_name: organization_webhook_doesnt_require_ssl
          title: Webhook Configured Without SSL
          description: Webhooks that are not configured with SSL enabled could expose your software to man in the middle attacks (MITM).
          severity: LOW
          remediation:
            - Go to the group Settings -> Webhooks page
            - Find the misconfigured webhook and press "Edit"
            - Toggle "Enable SSL verification"
            - Press "Save Changes"
          threat:
            - If SSL verification is disabled, any party with access to the target DNS domain can masquerade as your designated payload URL, allowing it freely read and affect the response of any webhook request.
            - In the case of GitLab Self-Managed, it may be sufficient only to control the DNS configuration of the network where the instance is deployed.
    member:
        - policy_name: two_factor_authentication_is_disabled_for_a_collaborator
          title: Two Factor Authentication Is Disabled For a Collaborator
          description: A collaborator's two factor authentication is disabled at the source code management system. Turn it on in the collaborator setting, or globally in the account, to prevent any access without MFA.
          severity: HIGH
          remediation:
            - Login with the user credentials
            - Go to the user settings page
            - Select "Account" on the left navigation bar
            - Press "Enable two-factor authentication"
          threat:
            - Collaborators without two-factor authentication are prime targets for phising and social engineering attacks, as compromise only requires acquiring the collaborator's password.
        - policy_name: two_factor_authentication_is_disabled_for_an_external_collaborator
          title: Two Factor Authentication Is Disabled For an External Collaborator
          description: An external collaborator's two factor authentication is disabled at the source code management system. Turn it on in the collaborator setting, or globally in the account, to prevent any access without MFA.
          severity: HIGH
          remediation:
            - Login with the user credentials
            - Go to the user settings page
            - Select "Account" on the left navigation bar
            - Press "Enable two-factor authentication"
          threat:
            - Collaborators without two-factor authentication are prime targets for phising and social engineering attacks, as compromise only requires acquiring the collaborator's password.
            - This is doubly important for external collaborators, as these are identities that aren't likely managed by you or your organization and may be easier to compromise.
        - policy_name: stale_admin_found
          title: Stale Admin Detected
          description: A collaborator with global admin permissions didn't do any action in the last 6 months. Admin users are extremely powerful and common compliance standards demand keeping the number of admins at minimum. Consider revoking this collaborator admin credentials (downgrade to regular user), or remove the user completely.
          severity: MEDIUM
          remediation:
            - Go to admin menu
            - Select "Overview -> Users" on the left navigation bar
            - Find the stale admin and either delete of block it
          threat:
            - Stale admins are most likely not managed and monitored, increasing the possibility of being compromised.
    project:
        - policy_name: code_review_not_required
          title: Project Doesn't Require Code Review For Default Branch
          description: In order to comply with separation of duties principle and enforce secure code practices, a code review should be mandatory using the source-code-management built-in enforcement. An even safer option is to require 2 separate reviewers, which is enforced in the Legitify policy "Project Doesn't Require Code Review By At Least Two Reviewers".
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Merge Requests" tab
            - Under "Merge request approvals"
            - Click "Add approval rule" on the default branch rule
            - Select "Approvals required" and enter at least 1 approvers"
            - Select "Add approvers" and select the desired members
            - Click "Add approval rule"
          threat:
            - Users can merge code without being reviewed which can lead to insecure code reaching the main branch and production.
        - policy_name: project_not_maintained
          title: Project Not Maintained
          description: The project was not active in the last 3 months. A project which is not active might not be patched against security issues within its code and dependencies, and is therefore at higher risk of including unpatched vulnerabilities.
          severity: HIGH
          remediation:
            - Make sure you have admin permissions
            - Either Delete or Archive the project
          threat:
            - As new vulnerabilities are found over time, unmaintained repositories are more likely to point to dependencies that have known vulnerabilities, exposing these repositories to 1-day attacks.
        - policy_name: repository_allows_overriding_approvers
          title: Merge Request Authors Nay Override the Approvers List
          description: The repository allows all merge request authors to freely edit the list of required approvers. To enforce code review only by authorized personnel, the option to override the list of valid approvers for the merge request must be toggled off.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Merge Requests" tab
            - Under "Approval settings"
            - Check "Prevent editing approval rules in merge requests"
            - Click "Save Changes"
          threat:
            - Users can merge code without being reviewed which can lead to insecure code reaching the main branch and production.
        - policy_name: code_review_by_two_members_not_required
          title: Project Doesn't Require Code Review By At Least Two Reviewers For Default Branch
          description: In order to comply with separation of duties principle and enforce secure code practices, a code review should be mandatory using the source-code-management built-in enforcement
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Merge Requests" tab
            - Under "Merge request approvals"
            - Click "Add approval rule" on the default branch rule
            - Select "Approvals required" and enter at least 2 approvers"
            - Select "Add approvers" and select the desired members
            - Click "Add approval rule"
          threat:
            - Users can merge code without being reviewed which can lead to insecure code reaching the main branch and production.
        - policy_name: repository_allows_review_requester_to_approve_their_own_request
          title: Repository Allows Review Requester To Approve Their Own Request
          description: A pull request owner can approve their own request. To comply with separation of duties and enforce secure code practices, the repository should prohibit pull request owners from approving their own changes.
          severity: MEDIUM
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Merge Requests" tab
            - Under "Approval settings"
            - Check "Prevent approval by author"
            - Click "Save Changes"
          threat:
            - Users can merge code without being reviewed which can lead to insecure code reaching the main branch and production.
        - policy_name: missing_default_branch_protection
          title: Default Branch Is Not Protected
          description: Branch protection is not enabled for this repository’s default branch. Protecting branches ensures new code changes must go through a controlled merge process and allows enforcement of code review as well as other security tests. This issue is raised if the default branch protection is turned off.
          severity: MEDIUM
          remediation:
            - Make sure you have owner permissions
            - Go to the projects's settings -> Repository page
            - Enter "Protected branches" tab
            - select the default branch. Set the allowed to merge to "maintainers" and the allowed to push to "No one"
          threat:
            - Any contributor with write access may push potentially dangerous code to this repository, making it easier to compromise and difficult to audit.
        - policy_name: missing_default_branch_protection_force_push
          title: Default Branch Allows Force Pushes
          description: The history of the default branch is not protected against changes for this repository. Protecting branch history ensures every change that was made to code can be retained and later examined. This issue is raised if the default branch history can be modified using force push.
          severity: MEDIUM
          remediation:
            - Make sure you have owner permissions
            - Go to the projects's settings -> Repository page
            - Enter "Protected branches" tab
            - select the default branch. Set the allowed to merge to "maintainers" and the allowed to push to "No one"
          threat:
            - Rewriting project history can make it difficult to trace back when bugs or security issues were introduced, making them more difficult to remediate.
        - policy_name: requires_status_checks
          title: Project Doesn’t Require All Pipelines to Succeed
          description: Checks that validate the quality and security of the code are not required to pass before submitting new changes. It is advised to turn this flag on to ensure any existing or future check will be required to pass.
          severity: MEDIUM
          remediation:
            - Make sure you can manage project merge requests permissions
            - Go to the project's settings page
            - Select "Merge Requests"
            - Press on the "Pipelines must succeed"
            - Click "Save changes"
          threat:
            - Not defining a set of required status checks can make it easy for contributors to introduce buggy or insecure code as manual review, whether mandated or optional, is the only line of defense.
        - policy_name: project_webhook_doesnt_require_ssl
          title: Webhook Configured Without SSL Verification
          description: Webhooks that are not configured with SSL verification enabled could expose your sofware to man in the middle attacks (MITM).
          severity: LOW
          remediation:
            - Make sure you can manage webhooks for the project
            - Go to the project's settings page
            - Select "Webhooks"
            - Press on the "Enable SSL verfication"
            - Click "Save changes"
          threat:
            - If SSL verification is disabled, any party with access to the target DNS domain can masquerade as your designated payload URL, allowing it freely read and affect the response of any webhook request.
            - In the case of GitLab Self-Managed, it may be sufficient only to control the DNS configuration of the network where the instance is deployed, as an attacker can redirect traffic to the target domain in your internal network directly to them, and this is often much easier than compromising an internet-facing domain.
        - policy_name: repository_allows_committer_approvals_policy
          title: Repository Allows Committer Approvals Policy
          description: The repository allows merge request contributors (that aren't the merge request author), to approve the merge request. To ensure merge request review is done objectively, it is recommended to toggle this option off.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Merge Requests" tab
            - Under "Approval settings"
            - Check "Prevent approvals by users who add commits"
            - Click "Save Changes"
          threat:
            - Users can merge code without being reviewed which can lead to insecure code reaching the main branch and production.
        - policy_name: repository_require_code_owner_reviews_policy
          title: Code Review Is Not Limited to Code-Owners Only in Default Branch
          description: It is recommended to require code review only from designated individuals specified in CODEOWNERS file. Turning this option on enforces that only the allowed owners can approve a code change. This option is found in the branch protection setting of the project.
          severity: LOW
          remediation:
            - Make sure you have owner permissions
            - Go to the projects's settings -> Repository page
            - Enter "Protected branches" tab
            - select the default branch. Check the "Code owner approval"
          threat:
            - A pull request may be approved by any contributor with write access. Specifying specific code owners can ensure review is only done by individuals with the correct expertise required for the review of the changed files, potentially preventing bugs and security risks.
        - policy_name: no_conversation_resolution
          title: Project Doesn't Require All Conversations To Be Resolved Before Merge
          description: Require all merge request conversations to be resolved before merging. Check this to avoid bypassing/missing a Pull Reuqest comment.
          severity: LOW
          remediation:
            - Make sure you can manage project merge requests permissions
            - Go to the project's settings page
            - Select "Merge Requests"
            - Press on the "All threads must be resolved"
            - Click "Save changes"
          threat:
            - Allowing the merging of code without resolving all conversations can promote poor and vulnerable code, as important comments may be forgotten or deliberately ignored when the code is merged.
        - policy_name: no_signed_commits
          title: Unsigned Commits Are Allowed
          description: Require all commits to be signed and verified
          severity: LOW
          remediation:
            - Make sure you have owner permissions
            - Go to the projects's settings -> Repository page
            - Enter "Push Rules" tab. Set the "Reject unsigned commits" checkbox
          threat:
            - A commit containing malicious code may be crafted by a malicious actor that has acquired write access to the repository to initiate a supply chain attack. Commit signing provides another layer of defense that can prevent this type of compromise.
        - policy_name: forking_allowed_for_repository
          title: Forking Allowed for This Repository
          description: Forking a repository can lead to loss of control and potential exposure of the source code. The option to fork must be disabled by default and turned on only by owners deliberately when opting to create a fork. If you do not need forking, it is recommended to turn it off in the project's configuration.
          severity: LOW
          remediation:
            - Make sure you have owner permissions
            - Go to the project's settings page
            - Enter "General" tab
            - Under "Visibility
            - project features
            - permissions"
            - Toggle off "Forks"
          threat:
            - Forked repositories may leak important code assets or sensitive secrets embedded in the code to anyone outside your organization, as the code becomes publicy-accessible
        - policy_name: project_has_too_many_admins
          title: Project Has Too Many Owners
          description: Projects' owners are highly privileged and could create great damage if being compromised, it's recommeneded to limit them to the minimum required (recommended maximum 3 admins).
          severity: LOW
          remediation:
            - Make sure you have owner permissions
            - Go to the Project Information -> Members page
            - Select the unwanted owner users and remove the selected owners
          threat:
            - A compromised user with owner permissions can initiate a supply chain attack in a plethora of ways.
            - Having many admin users increases the overall risk of user compromise, and makes it more likely to lose track of unused admin permissions given to users in the past.
        - policy_name: repository_dismiss_stale_reviews
          title: Default Branch Doesn't Require New Code Changes After Approval To Be Re-Approved
          description: This security control prevents merging code that was approved but later on changed. Turning it on ensures new changes are required to be reviewed again. This setting is part of the Merge request approval settings, and hardens the code-review process. If turned off - a developer can change the code after approval, and push code that is different from the one that was previously allowed.
          severity: LOW
          remediation:
            - Make sure you have admin permissions
            - Go to the repo's settings page
            - Enter "Merge Requests" tab
            - Under "Approval settings"
            - Check "Remove all approvals"
            - Click "Save Changes"
          threat:
            - Buggy or insecure code may be committed after approval and will reach the main branch without review. Alternatively, an attacker can attempt a just-in-time attack to introduce dangerous code just before merge.
